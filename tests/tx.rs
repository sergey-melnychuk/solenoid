use eyre::Context;
use solenoid::{
    common::{
        address::{Address, addr},
        word::{Word, word},
    },
    eth,
    ext::Ext,
    solenoid::{Builder, CallResult, Solenoid},
    tracer::{EventTracer, LoggingTracer},
};

async fn tx(
    tag: &str,
    from: Address,
    to: Address,
    input: &str,
    gas: Word,
    value: Word,
) -> eyre::Result<CallResult<LoggingTracer>> {
    dotenv::dotenv().ok();
    let _ = tracing_subscriber::fmt::try_init();

    let url = std::env::var("URL")?;
    let eth = eth::EthClient::new(&url);
    // let mut ext = Ext::at_latest(eth).await?;
    let mut ext = Ext::at_number(word("0x15f5e95"), eth).await?;
    ext.acc_mut(&from).value = Word::from(1_000_000_000_000_000_000u64);

    let sole = Solenoid::new();
    let res = sole
        .execute(to, "", &hex::decode(input.trim_start_matches("0x"))?)
        .with_sender(from)
        .with_gas(gas)
        .with_value(value)
        .ready()
        .apply(&mut ext)
        .await
        .with_context(|| format!("tag:{tag}"))?;
    Ok(res)
}

/*
#[tokio::test]
async fn test_tx_()
-> eyre::Result<()> {
    let mut res = tx(
        "",
        addr(""),
        addr(""),
        "",
        word(""),
        word("0x"),
    ).await?;
    for e in res.tracer.take() {
        println!("{}", serde_json::to_string(&e)?);
    }
    assert!(!res.evm.reverted);
    Ok(())
}
*/

#[tokio::test]
#[ignore = "TODO"]
async fn test_tx_0xe30bacb372ab39e3cfc57c2b939ed1962833852e884d60fcbca6f82d2c2a6507()
-> eyre::Result<()> {
    let mut res = tx(
        "0xe30bacb372ab39e3cfc57c2b939ed1962833852e884d60fcbca6f82d2c2a6507", 
        addr("0x2555abe866ba45a57e62fcc06e8039686fd840a2"),
        addr("0x03f34be1bf910116595db1b11e9d1b2ca5d59659"),
        "0xa32fe0a100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000444645a55b64c27dad2b0894d22877e58f4ae69bcc864d6aae447ebaa4b743365e774b62cdf000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000032464a3bc1500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000056178a0d5f301baf6cf3e1cd53d9863437345bf90000000000000000000000008d90113a1e286a5ab3e496fbd1853f265e5913c60000000000000000000000002555abe866ba45a57e62fcc06e8039686fd840a20000000000000000000000008d90113a1e286a5ab3e496fbd1853f265e5913c600000000000000000000000000000000000000000000000000000000b36fa70e0000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068893833d6f127c6bf19306a6755a1d82ba412883a8b294289e0fc49a9851215def1001e000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c720fa5fb33b8eaafb120a9613f336b7c9ac5aaf46342ad129a938f3633555c7e648ef781930af918793832f2a2acad39a442c6b2221a66915544325fdf1e12ea030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000561cc07e4b7acf7fc65c1d3ad5ed01c036a9009b4b74b0d70f0dc3a2a9c97dcb99454fcedccba2658dbdf3912bd4fc4297986cb2aff71e727b5811405e443c5011222555abe866ba45a57e62fcc06e8039686fd840a2040000000000000000000000000000000000000000000000000000000000000000000000000000", 
        word("0x5fc52"),
        word("0xb1a2bc2ec500000"),
    ).await?;
    for e in res.tracer.take() {
        println!("{}", serde_json::to_string(&e)?);
    }
    assert!(!res.evm.reverted);
    Ok(())
}

// a32fe0a1
// 0000000000000000000000000000000000000000000000000000000000000020 // offset: 32
// 0000000000000000000000000000000000000000000000000000000000000444 // size: 1092
// 645a55b64c27dad2b0894d22877e58f4ae69bcc864d6aae447ebaa4b743365e774b62cdf000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000032464a3bc1500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000056178a0d5f301baf6cf3e1cd53d9863437345bf90000000000000000000000008d90113a1e286a5ab3e496fbd1853f265e5913c60000000000000000000000002555abe866ba45a57e62fcc06e8039686fd840a20000000000000000000000008d90113a1e286a5ab3e496fbd1853f265e5913c600000000000000000000000000000000000000000000000000000000b36fa70e0000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068893833d6f127c6bf19306a6755a1d82ba412883a8b294289e0fc49a9851215def1001e000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c720fa5fb33b8eaafb120a9613f336b7c9ac5aaf46342ad129a938f3633555c7e648ef781930af918793832f2a2acad39a442c6b2221a66915544325fdf1e12ea030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000561cc07e4b7acf7fc65c1d3ad5ed01c036a9009b4b74b0d70f0dc3a2a9c97dcb99454fcedccba2658dbdf3912bd4fc4297986cb2aff71e727b5811405e443c5011222555abe866ba45a57e62fcc06e8039686fd840a20400000000000000000000
// 00000000000000000000000000000000000000000000000000000000 // padding?

#[tokio::test]
async fn test_tx_0x9b312d7abad8a54cca5735b21304097b700142cea90aeba3740f6a470e734fa6()
-> eyre::Result<()> {
    let mut res = tx(
        "0x9b312d7abad8a54cca5735b21304097b700142cea90aeba3740f6a470e734fa6",
        addr("0xb6b1581b3d267044761156d55717b719ab0565b1"),
        addr("0x5c2e112783a6854653b4bc7dc22248d3e592559c"),
        "0xb081b4eb",
        word("0x9a38"),
        word("0x"),
    )
    .await?;
    for e in res.tracer.take() {
        println!("{}", serde_json::to_string(&e)?);
    }
    assert!(!res.evm.reverted);
    // assert_eq!(res.evm.gas.used, word("0x9a28"));
    Ok(())
}

#[tokio::test]
async fn test_tx_0x6d2d94b5bf06ff07cca77f0100233da7d45876cc58595122505ebd124d00d4a1()
-> eyre::Result<()> {
    let mut res = tx(
        "0x6d2d94b5bf06ff07cca77f0100233da7d45876cc58595122505ebd124d00d4a1", 
        addr("0xe7f1725e7734ce288f8367e1bb143e90bb3f0512"), 
        addr("0x0000000000000068f116a894984e2db1123eb395"),
        "0x0000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098b59351f748000000000000000000000000061514b196d5e8e3ff56b71b0631f986285c0e85a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd8451d2d5fb88469a764b05c1e0b623c51061450000000000000000000000000000000000000000000000000000000000006b150000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000688936f30000000000000000000000000000000000000000000000000000000068b0c3f300000000000000000000000000000000000000000000000000000000000000003d958fe2000000000000000000000000000000000000000032fd34e0013cb0db0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000c4733b967800000000000000000000000000000a26b00c1f0df003000390027140000faa7190000000000000000000000000000000000000000000000000000000000000040643293cf69bfb8078586f8e8274c2aaf046a7bec4d6611e565f2b37a34a46db156ad1fb1c815ae2155bc0fdccb34e33e777fb45d5d3e8b01c7410cb1b101cc373d958fe2", 
        word("0x277e7"),
        word("0x"),
    ).await?;
    for e in res.tracer.take() {
        println!("{}", serde_json::to_string(&e)?);
    }
    assert!(res.evm.reverted);
    Ok(())
}
